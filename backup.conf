#!/bin/bash

# Edit the root crontab
sudo crontab -e

# Add the following lines to the crontab
0 0 * * * /Lab4Script/backup.sh daily
0 0 * * 0 /Lab4Script/backup.sh weekly
0 0 1 * * /Lab4Script/backup.sh monthly
# The first and only parameter to the backup script is the backup name
BACKUP_NAME=$1
DATE=$(date +"%Y-%m-%d")
TIME=$(date +"%H:%M")
HOSTNAME=$(hostname)
LOG_FILE="/var/log/backup/$BACKUP_NAME.$DATE.$TIME"
# Parse the configuration file and set variables equal to all configuration file items
while IFS= read -r line
do
    # Check if the line contains an equals sign
    if [[ $line == *"="* ]]; then
        # Use eval to set the variable
        eval $(echo $line | tr -d ' ')
    fi
done < backup.conf

# Extract the required data for the backup name line
BACKUP_LINE=$(grep "^$BACKUP_NAME:" backup.conf)
IFS=':' read -ra ADDR <<< "$BACKUP_LINE"
DIRECTORY=${ADDR[1]}
RECURSIVE=${ADDR[2]}
NUM_DAILY=${ADDR[3]}
NUM_WEEKLY=${ADDR[4]}
NUM_MONTHLY=${ADDR[5]}

# Echo the variable name and content for all variables to stdout
echo "COMPRESSION=$COMPRESSION"
echo "E_MAIL=$E_MAIL"
echo "BACKUP_TARGET=$BACKUP_TARGET"
echo "TARGET_TYPE=$TARGET_TYPE"
echo "TARGET_SERVER=$TARGET_SERVER"
echo "TARGET_FS=$TARGET_FS"
echo "USER=$USER"
echo "PASSWORD=$PASSWORD"
echo "DIRECTORY=$DIRECTORY"
echo "RECURSIVE=$RECURSIVE"
echo "NUM_DAILY=$NUM_DAILY"
echo "NUM_WEEKLY=$NUM_WEEKLY"
echo "NUM_MONTHLY=$NUM_MONTHLY"


# Create the backup directory if it doesn't exist
mkdir -p $BACKUP_TARGET/adhoc

# Store the backup target in a tar archive and compress it
tar -czf $BACKUP_TARGET/adhoc/$HOSTNAME.$BACKUP_NAME.$DATE.$TIME.tar.gz $DIRECTORY

# Create a new log file and write the date, time, and list of files backed up
echo "Date: $DATE" > $LOG_FILE
echo "Time: $TIME" >> $LOG_FILE
ls -lR $DIRECTORY >> $LOG_FILE

# Check the number of copies in the backup sub-directory
NUM_COPIES=$(ls $BACKUP_TARGET/$BACKUP_TYPE | wc -l)
MAX_COPIES=NUM_DAILY
if [[ $BACKUP_TYPE == "weekly" ]]; then
    MAX_COPIES=$NUM_WEEKLY
elif [[ $BACKUP_TYPE == "monthly" ]]; then
    MAX_COPIES=$NUM_MONTHLY
fi
# If there are more copies than the maximum specified, delete the oldest files
while (( NUM_COPIES > MAX_COPIES ))
do
    OLDEST_FILE=$(ls -tr $BACKUP_TARGET/$BACKUP_TYPE | head -n 1)
    rm $BACKUP_TARGET/$BACKUP_TYPE/$OLDEST_FILE
    let "NUM_COPIES--"
done
# Restore script
RESTORE_FILE=$1

# Ask the user to verify the operation
read -p "Are you sure you want to restore from $RESTORE_FILE? This will overwrite existing files. (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # Restore the files
    tar -xzf $RESTORE_FILE -C /
fi
